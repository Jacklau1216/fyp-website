$(document).ready(function() {
    $("#detect-button").click(function() {
        $("#result").text("")
        $("#percentage").text("")
        document.getElementById('detailed_result').innerHTML = '<div></div>'

        var text = $("#text-input").val();
         $.ajax({
            url: "/GLTR_detect",
            type: "POST",
            data: { text: text },
            success: function(response) {
                console.log("GLTR_detect");
                drawTopK("topKCount",Object.keys(response.topk),Object.values(response.topk),"topKCount",0);
                drawTopK("fracPHistogram",Object.keys(response.fracp),Object.values(response.fracp),"Frac(p)",1);
                drawTopK("top10Entropy",Object.keys(response.top10Entropy),Object.values(response.top10Entropy),"Top 10 Entropy",2);
//                console.log(response.pop_up_display)
                drawColorTextBox(response.topk_display,response.countArray,response.pop_up_display);
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
        $.ajax({
            url: "/detect",
            type: "POST",
            data: { text: text },
            success: function(response) {
                $("#result").text("LLM Detection Result: " + response[0]);
                $("#percentage").text("Text is Generated by LLM %: " + response[1]*100 + "%");
                VisualizeResult(response[2], response[3]);
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    });
    
    $('#upload-file-btn').click(function() {
        var form_data = new FormData($('#upload-file')[0]);
        $.ajax({
            type: 'POST',
            url: '/upload_file',
            data: form_data,
            contentType: false,
            cache: false,
            processData: false,
            success: function(data) {
                console.log('Success!');

            },
        });
    });

    $('#detect-file-button').click(function(){
        var form_data = new FormData($('#upload-file')[0]);
        $.ajax({
            type: 'POST',
            url: '/detect_file',
            data: form_data,
            contentType: false,
            cache: false,
            processData: false,
            success: function(data) {
                console.log('Success!');

            },
        });
    })

});

function VisualizeResult(wordsData, tips) {
    const container = document.getElementById('detailed_result');
    let htmlContent = '<div class="LMF">';

    const colors = [
        '#FFBF00', // Amber
        '#F6F193',  // Light Yellow
        ];
    
    wordsData.forEach((data, index) => {
        let color = "white";
        if (data.result == true) {
            if (data.percentage >= 0.75) {
                color = colors[0];
            }
            else {
                color = colors[1];
            }
        }
        // Generate HTML content for each chunk, including a data attribute for the index
        htmlContent += `<div class="chunk" style="text-align: left;"><span class="chunk_text" style="background-color: ${color};" data-index="${index}">${data.text}</span></div>`;
    });

    htmlContent += '</div>';
    container.innerHTML = htmlContent;

    // Create a single tooltip element
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip hidden';
    document.body.appendChild(tooltip);

    // Add event listeners for each token
    container.querySelectorAll('.chunk_text').forEach(token => {
    token.addEventListener('mouseenter', (e) => {
        const index = token.getAttribute('data-index');
        const tip = tips[index];
        // Format the tooltip content with Probability value
        tooltip.innerHTML = `Probability: ${tip * 100} %`;

        // Position the tooltip at the bottom-right of the token
        // Adjust as necessary for your layout
        tooltip.style.left = `${event.clientX+20}px`;
        tooltip.style.top = `${event.clientY-100}px`; // 20px offset for visibility

        tooltip.classList.remove('hidden');
    });

    token.addEventListener('mouseleave', () => {
        tooltip.classList.add('hidden');
    });
});
}

document.addEventListener('DOMContentLoaded', () => {
    const ensembleSwitch = document.getElementById('llm_detailed_result_switch');
    const ensembleResults = document.querySelector('.ensemble_detector');

    // Optionally, initially hide the ensemble_detector results
    ensembleResults.style.display = 'none';

    ensembleSwitch.addEventListener('change', () => {
        if (ensembleSwitch.checked) {
            // Show the ensemble_detector results if the switch is checked
            ensembleResults.style.display = 'flex';
        } else {
            // Hide the ensemble_detector results if the switch is not checked
            ensembleResults.style.display = 'none';
        }
    });
});
